'''
This program was written by Jonathon Galsurkar and Meredith Lancaster under the supervision of Prof. William Sakas
at Hunter College, Computer Science and the Graduate Center, Linguistics and Computer Science of the City University 
of New York. 

sakas@hunter.cuny.edu

The program implements a learner that learns multiple abstract, human-like languages grounded in Chomsky's principles
and parameters framework. The learning model is one of first language acquisition, i.e., acquisition by a child of approximately
2 years of age. 

The learner and the abstract domain over which it operates is described in detail in:

Sakas, W.G. & Fodor, J.D. (2012) Disambiguating Syntactic Triggers, Language Acquisition (19) pp 83-143.

The paper and domain and other relevant information are downloadable here: 

http://www.colag.cs.hunter.cuny.edu/downloadables.html


8/9/2016: The program is currently being maintained by Meredith Lancaster 

Meredith.Lancaster88@myhunter.cuny.edu

The most recent data generated by the program are currently available in the results folder 
'''

import time
import sys, getopt
import os
from Child import Child
from runSimulation import runSimulation

def main(argv):
    maxEchildren = 0
    maxSentences = 0
    languageCode = ''
    outputFile = ''

    try:
        opts, args = getopt.getopt(argv,"h")

    except getopt.GetoptError:
        sys.exit(2)

    # If the help option appears in the command line
    for opt in opts:
        if opt in ("-h", "--help"):
            print 'Enter four command line arguments:'
            print '(1) The number of eChildren to run the simulation on'
            print '(2) The number of sentences for each eChild to process'
            print '(3) The desired language code (French=584, English=611, German=2253, Japanese=3856)'
            print '(4) The name of the output file'
            sys.exit()


    if len(sys.argv) < 5:
        print 'An incorrect number of arguments were entered'
        sys.exit(2)

    # Test whether certain command line arguments
    # can be converted to positive integers
    try:
        maxEchildren = int(sys.argv[1])
        if maxEchildren < 0:
            print 'Argument must be a positive integer'
            sys.exit(2)
    except ValueError:
        print 'The argument entered is not a valid integer'
        sys.exit(2)

    try:
        maxSentences = int(sys.argv[2])
        if maxSentences < 0:
            print 'Argument must be a positive integer'
            sys.exit(2)
    except ValueError:
        print 'The argument entered is not a valid integer'
        sys.exit(2)

    try:
        int(sys.argv[3])
        languageCode = sys.argv[3]
    except ValueError:
        print 'The argument entered is not a valid integer'
        sys.exit(2)

    if sys.argv[4].endswith('csv'):
        outputFile = sys.argv[4]
    else:
        print 'The name of the output file must end with the .csv extension'
        sys.exit(2)


    # This will erase the contents of the chosen output file
    # to make room for the new results
    open(outputFile, 'w').close()

    # Open the file containing sample sentences for 
    # English, French, German, and Japanese and read
    # them in a runSimulation class variable
    infoFile = open('EngFrJapGerm.txt','rU')
    runSim1 = runSimulation(infoFile.readlines())
    infoFile.close()

    # Choose sentences corresponding to one of the four languages
    # available: French=584, English=611, German=2253, Japanese=3856
    runSim1.makeSelectedSentenceList(languageCode)

    # Runs a simulation over maxEchildren number of eChild learners
    runSim1.runLearners(maxEchildren, maxSentences, outputFile)

if __name__ == '__main__':
    start = time.time() 
    main(sys.argv[1:])
    end = time.time() - start
    print "Time to complete:", end