6-15-16/////////////////////////////
Assume that echild knows what the sentence's illoc is
Grammars can be service equivalent if they generate the same exact set of strings

French=584, English=611, German=2253, Japanese=3856
The first column is the grammar ID (grammID) 584, 611, 2253 or 3856.

The second column is a unique sentence ID (sentID) for every combination of illocutionary force (illoc: Q, DEC, or IMP) and sentence (e.g., S Verb O1, Verb Aux ka, etc.)

The third column is illoc (Q, DEC, or IMP)

The fourth column is the actual sentence (usually processed together with illoc, for example rather than processing just S Verb O1, we'd normally treat it as DEC S Verb O1)

The fifth and last column is the unique id for the tree structure (structID) for illoc+sent -- we can ignore this last column for now.
////////////////////////////////////

6-13-16 meeting/////////////////////
Parameter 4 - obligatory topic - problem parameter

start state = 0

Parameter 6 - null topic - problem parameter

start state = 0

If null topic, p6 = 1

///Steps////////////
Given 00 (first represents p4, second represents p6)
A represents the base of the tree

A.1 Check for evidence for null topic
    If so, 00 -> 01
    German - obligatory topic, null subject

A.2 Check for evidence of optional topic
    If so, 00 -> 10
    English - optional topic, no null subject

A.2.1 Check for evidence of null topic
    If so, 10 -> 01
    German - obligatory topic, null subject

A.1.1 Can never be evidence for optional topic.
Cannot exist, not valid

Only valid states are 00, 01, 10

            Visual tree
              00
            /   \
           10   01
           /
          01

/////////////////////////////////

English  
	Result   : 0 0 0 1 0 0 1 1 0 0 0 1 0
	Expected : 0 0 0 1 0 0 1 1 0 0 0 1 1 

So far so good
	   
Japanese 
	Result   : 0 1 1 1 1 0 0 0 1 0 0 0 0
	Expected : 0 1 1 1 1 0 0 0 1 0 0 0 0
	
So far so good
					  
German 
	Result   : 0 1 0 0 0 1 1 0 0 1 1 0 1
	Expected : 0 1 0 0 0 1 1 0 0 1 1 0 1
	
	So far so good
	
French 
	Result   : 0 0 0 1 0 0 1 0 0 1 0 0 0
	Expected : 0 0 0 1 0 0 1 0 0 1 0 0 0

	So far so good
       
	   
	   
+FIN STUFF	   
	'''
    testFile = open('/Users/JohnnyXD1/Desktop/RESEARCH/japTEST.txt')
    outFile =  open('/Users/JohnnyXD1/Desktop/RESEARCH/japREPLACE.txt', 'w')
    
    replacements = {'Verb':'Verb[-FIN]', 'Aux':'Aux[+FIN]'}
    for line in testFile:
        for src, target in replacements.iteritems():
            if ('DEC' in line or 'Q' in line) and 'Aux' not in line and "+FIN" not in line:
                line = line.replace('Verb', 'Verb[+FIN]')
            outFile.write(line)
    testFile.close()
    outFile.close()
    '''
    
    '''
    infile = open('path/to/input/file')
    outfile = open('path/to/output/file', 'w')
    
    replacements = {'zero':'0', 'temp':'bob', 'garbage':'nothing'}
    
    for line in infile:
        for src, target in replacements.iteritems():
            line = line.replace(src, target)
        outfile.write(line)
    infile.close()
    outfile.close()
    '''
    
    
    
	   